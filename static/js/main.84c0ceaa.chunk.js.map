{"version":3,"sources":["components/Navigation.js","components/AddTodo.js","useful_functions/returnMachIndex.js","useful_functions/makeID.js","icons/delete_outline-black-18dp.svg","icons/edit.svg","components/TodoListItems.js","App.js","reportWebVitals.js","index.js"],"names":["Navigation","props","changeNavigationState","navigationState","onClick","data-navigation-section","className","AddTodo","addNewTodo","handleChange","newTodoValue","cantAddNewTodo","onSubmit","disabled","type","name","value","onChange","placeholder","returnMachIndex","array","id","matchIndex","undefined","map","lastObject","index","makeID","length","result","characters","charactersLength","i","charAt","Math","floor","random","TodoListItems","App","state","allTodos","newTodo","editTodoData","text","isCompleted","isEdited","event","newNavigationState","target","dataset","navigationSection","setState","preventDefault","newTodoText","todosToFormat","JSON","parse","stringify","push","lastState","alert","deleteTodo","indexToDelete","splice","deleteAllCompletedTodos","newTodos","filter","todo","editTodo","machIndex","todoIsCompleted","todoText","updateCheckState","prevProps","prevState","snapshot","this","editedTodo","saveToLocalStorage","localStorage","getItem","JsonTodos","todosCopy","setItem","todoItem","data","todoList","generateTodoListItems","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.84c0ceaa.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"components/Navigation.css\"\r\n\r\nfunction Navigation(props){\r\n    const changeNavigationState = props.changeNavigationState\r\n    const navigationState = props.navigationState\r\n    return(\r\n        <nav>\r\n            <ul>\r\n                <li\r\n                    onClick={changeNavigationState}\r\n                    data-navigation-section=\"all\"\r\n                    className={navigationState === \"all\"?\"selected\":''}>\r\n                    All\r\n                </li>\r\n\r\n                <li\r\n                    onClick={changeNavigationState}\r\n                    data-navigation-section=\"active\"\r\n                    className={navigationState === \"active\"?\"selected\":''}>\r\n                    Active\r\n                </li>\r\n                <li\r\n                    onClick={changeNavigationState}\r\n                    data-navigation-section=\"completed\"\r\n                    className={navigationState === \"completed\"?\"selected\":''}>\r\n                    Completed\r\n                </li>\r\n            </ul>\r\n            <hr/>\r\n        </nav>\r\n\r\n    )\r\n}\r\n\r\nexport default Navigation","import React from \"react\";\r\nimport \"components/AddTodo.css\"\r\n\r\nfunction AddTodo(props){\r\n    const addNewTodo = props.addNewTodo\r\n    const handleChange = props.handleChange\r\n    const newTodoValue = props.newTodoValue\r\n    const cantAddNewTodo = props.navigationState === 'completed'\r\n    return(\r\n        <form onSubmit={addNewTodo} className=\"add-item\">\r\n            <input\r\n                disabled={cantAddNewTodo}\r\n                type=\"text\"\r\n                name=\"newTodo\"\r\n                value={newTodoValue}\r\n                onChange={handleChange}\r\n                placeholder=\"add details\"\r\n            />\r\n            <button\r\n                disabled={cantAddNewTodo}\r\n            >\r\n                Add\r\n            </button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default AddTodo","function returnMachIndex(array, id) {\r\n    let matchIndex = undefined\r\n    array.map((lastObject, index) => {\r\n        if (lastObject.id === id)\r\n            matchIndex = index\r\n    })\r\n\r\n    return matchIndex\r\n}\r\n\r\nexport {returnMachIndex}","function makeID(length) {\r\n    let result             = '';\r\n    const characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+';\r\n    const charactersLength = characters.length;\r\n    for ( let i = 0; i < length; i++ ) {\r\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    }\r\n    return result;\r\n}\r\n\r\nexport default makeID","export default __webpack_public_path__ + \"static/media/delete_outline-black-18dp.33f147e3.svg\";","export default __webpack_public_path__ + \"static/media/edit.983039f8.svg\";","import React from \"react\";\r\nimport binIcon from \"icons/delete_outline-black-18dp.svg\"\r\nimport editIcon from \"icons/edit.svg\"\r\nimport \"components/TodoListItems.css\"\r\nimport \"styles/icons.css\"\r\nimport \"styles/checkox.css\"\r\nimport \"styles/margins_paddings.css\"\r\n\r\nfunction TodoListItems(props){\r\n    const text = props.data.text\r\n    const isCompleted = props.data.isCompleted\r\n    const id = props.data.id\r\n    return(\r\n        <div className=\"todo-item-container\">\r\n            {/*className={isCompleted?'':'uncompleted'}*/}\r\n            <label className=\"control control-checkbox\">\r\n                <input type=\"checkbox\"\r\n                       name=\"isCompleted\"\r\n                       checked={isCompleted}\r\n                       data-id={id}\r\n                       onClick={props.updateCheckState}/>\r\n                <div className=\"control_indicator\"/>\r\n            </label>\r\n\r\n            <p className=\"todo-text\"> {text} </p>\r\n\r\n            <div className=\"todo-icons\">\r\n                { props.navigationState !== \"completed\" &&\r\n                <img\r\n                    className=\"light-gray-icon ml6\"\r\n                    width=\"20px\" height=\"20px\"\r\n                    src={editIcon}\r\n                    onClick={props.editTodo}\r\n                    data-id={id}\r\n                    alt=\"edit icon\"\r\n                />\r\n                }\r\n\r\n                <img\r\n                    className=\"light-gray-icon\"\r\n                    width=\"20px\" height=\"20px\"\r\n                    src={binIcon}\r\n                    onClick={props.deleteTodo}\r\n                    data-id={id}\r\n                    alt=\"bin icon\"\r\n                />\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoListItems","import React from \"react\";\nimport Navigation from \"./components/Navigation\";\nimport AddTodo from \"./components/AddTodo\";\nimport {returnMachIndex} from \"./useful_functions/returnMachIndex\";\nimport makeID from \"./useful_functions/makeID\";\nimport 'App.css';\nimport TodoListItems from \"./components/TodoListItems\";\n\nclass App extends React.Component {\n    state = {\n        allTodos: [], // Ex. data [{text: 'test_todo1', isCompleted: true, id: '1123'}]\n        navigationState: 'all',\n        newTodo: '',\n        editTodoData: {text:'' ,isCompleted: false, isEdited: false}\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (!this.state.editTodoData.isEdited )\n            this.saveToLocalStorage()\n        else{\n            // add edited data to local storage\n            const editedTodo = {\n                text : this.state.editTodoData.text,\n                isCompleted : this.state.editTodoData.isCompleted,\n                id : makeID(10)\n            }\n            this.saveToLocalStorage(editedTodo)\n        }\n    }\n\n    componentDidMount() {\n        const allTodos = JSON.parse(localStorage.getItem('allTodos'))\n        this.setState({allTodos})\n    }\n\n    saveToLocalStorage(editedTodo= false) {\n        let JsonTodos\n        if (editedTodo){\n            let todosCopy = JSON.parse(JSON.stringify(this.state.allTodos))\n            todosCopy.push(editedTodo)\n            JsonTodos = JSON.stringify(todosCopy)\n        } else\n            JsonTodos = JSON.stringify(this.state.allTodos)\n        localStorage.setItem('allTodos', JsonTodos)\n    }\n\n    changeNavigationState = (event) => {\n        const newNavigationState = event.target.dataset.navigationSection\n        this.setState({navigationState: newNavigationState})\n    }\n\n    handleChange = (event) => {\n        const {value, name} = event.target\n        this.setState({[name]: value})\n    }\n\n    addNewTodo = (event) => {\n        event.preventDefault()\n        const newTodoText = this.state.newTodo\n        const isCompleted = this.state.editTodoData.isCompleted\n        if (newTodoText) {\n            const newTodo = {text: newTodoText, isCompleted: isCompleted, id: makeID(10)}\n            const todosToFormat = JSON.parse(JSON.stringify(this.state.allTodos)) // Deep copy state.allTodos\n            todosToFormat.push(newTodo)\n\n            this.setState((lastState) => {\n                return ({\n                    ...lastState,\n                    allTodos: todosToFormat,\n                    newTodo: '',\n                    editTodoData: {isEdited: false, isCompleted: false}\n                })\n            })\n        } else {\n            // Some Action if array is empyu\n            alert('Cant add empty task')\n        }\n    }\n\n    deleteTodo = (event) => {\n        const {id} = event.target.dataset\n        const todosToFormat = JSON.parse(JSON.stringify(this.state.allTodos)) // Deep copy state.allTodos\n        const indexToDelete = returnMachIndex(todosToFormat, id)\n        todosToFormat.splice(indexToDelete, 1)\n\n        this.setState({allTodos: todosToFormat})\n    }\n\n    deleteAllCompletedTodos = (event) => {\n        const todosToFormat = JSON.parse(JSON.stringify(this.state.allTodos)) // Deep copy state.allTodos\n\n        const newTodos = todosToFormat.filter((todo) => {\n            if (!todo.isCompleted) return todo\n        })\n        this.setState({allTodos: newTodos})\n    }\n\n    editTodo = (event) => {\n        if (this.state.editTodoData.isEdited)\n            alert(\"First end edit selected todo\")\n        else {\n            const {id} = event.target.dataset\n            const allTodos = this.state.allTodos // Deep copy state.allTodos\n            const machIndex = returnMachIndex(allTodos, id)\n            const todoIsCompleted = allTodos[machIndex].isCompleted\n            const todoText = allTodos[machIndex].text\n            this.setState({\n                newTodo: todoText,\n                editTodoData: {isCompleted: todoIsCompleted, isEdited: true, text:todoText}\n            })\n            this.deleteTodo(event)\n        }\n    }\n\n    updateCheckState = (event) => {\n        const {id} = event.target.dataset\n        const todosToFormat = JSON.parse(JSON.stringify(this.state.allTodos)) // Deep copy state.allTodos\n        const machIndex = returnMachIndex(todosToFormat, id)\n        todosToFormat[machIndex].isCompleted = !todosToFormat[machIndex].isCompleted\n\n        this.setState({allTodos: todosToFormat})\n    }\n\n    generateTodoListItems(){\n        let TodoListItems = ''\n        const allTodos = this.state.allTodos\n\n        if (allTodos)\n            TodoListItems = allTodos.filter((todoItem) => {\n                if (this.state.navigationState === 'active' && todoItem.isCompleted === false)\n                    return (todoItem)\n                if (this.state.navigationState === 'completed' && todoItem.isCompleted === true)\n                    return (todoItem)\n                if (this.state.navigationState === 'all')\n                    return (todoItem)\n            }).map((todoItem) => {\n                return (\n                    <TodoListItems\n                        data={todoItem}\n                        deleteTodo={this.deleteTodo}\n                        updateCheckState={this.updateCheckState}\n                        editTodo={this.editTodo}\n                        navigationState={this.state.navigationState}\n                    />\n                )\n            })\n        return TodoListItems\n\n    }\n\n    render() {\n        const todoList = this.generateTodoListItems()\n        return (\n            <div id=\"main-container\">\n                <h1 id=\"app-title\"> #todo </h1>\n                <Navigation\n                    changeNavigationState={this.changeNavigationState}\n                    navigationState={this.state.navigationState}\n                />\n\n                <AddTodo\n                    addNewTodo={this.addNewTodo}\n                    handleChange={this.handleChange}\n                    newTodoValue={this.state.newTodo}\n                    navigationState={this.state.navigationState}\n                />\n\n                {todoList}\n\n                {\n                    this.state.navigationState === 'completed' &&\n                    <div className=\"flex-float-right\">\n                        <button onClick={this.deleteAllCompletedTodos} id=\"delete-all-btn\">\n                            &nbsp;delete all\n                        </button>\n                    </div>\n                }\n            </div>\n        )\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}